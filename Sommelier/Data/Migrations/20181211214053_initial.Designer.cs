// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sommelier.Data;

namespace Sommelier.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181211214053_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sommelier.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new { CategoryId = 1, Name = "Dry White" },
                        new { CategoryId = 2, Name = "Sweet White" },
                        new { CategoryId = 3, Name = "Rich White" },
                        new { CategoryId = 4, Name = "Sparkling" },
                        new { CategoryId = 5, Name = "Light Red" },
                        new { CategoryId = 6, Name = "Medium Red" },
                        new { CategoryId = 7, Name = "Bold Red" },
                        new { CategoryId = 8, Name = "Dessert" }
                    );
                });

            modelBuilder.Entity("Sommelier.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("FoodId");

                    b.ToTable("Food");

                    b.HasData(
                        new { FoodId = 1, Name = "Vegetables" },
                        new { FoodId = 2, Name = "Roasted Vegetables" },
                        new { FoodId = 3, Name = "Soft Cheese" },
                        new { FoodId = 4, Name = "Hard Cheese" },
                        new { FoodId = 5, Name = "Starches" },
                        new { FoodId = 6, Name = "Fish" },
                        new { FoodId = 7, Name = "Rich Fish" },
                        new { FoodId = 8, Name = "White Meat" },
                        new { FoodId = 9, Name = "Red Meat" },
                        new { FoodId = 10, Name = "Cured Meat" },
                        new { FoodId = 11, Name = "Sweets" }
                    );
                });

            modelBuilder.Entity("Sommelier.Models.FoodCategory", b =>
                {
                    b.Property<int>("FoodCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("FoodId");

                    b.HasKey("FoodCategoryId");

                    b.ToTable("FoodCategory");

                    b.HasData(
                        new { FoodCategoryId = 1, CategoryId = 1, FoodId = 1 },
                        new { FoodCategoryId = 2, CategoryId = 4, FoodId = 1 },
                        new { FoodCategoryId = 3, CategoryId = 1, FoodId = 2 },
                        new { FoodCategoryId = 4, CategoryId = 5, FoodId = 2 },
                        new { FoodCategoryId = 5, CategoryId = 6, FoodId = 2 },
                        new { FoodCategoryId = 6, CategoryId = 2, FoodId = 3 },
                        new { FoodCategoryId = 7, CategoryId = 3, FoodId = 3 },
                        new { FoodCategoryId = 8, CategoryId = 4, FoodId = 3 },
                        new { FoodCategoryId = 9, CategoryId = 8, FoodId = 3 },
                        new { FoodCategoryId = 10, CategoryId = 2, FoodId = 4 },
                        new { FoodCategoryId = 11, CategoryId = 4, FoodId = 4 },
                        new { FoodCategoryId = 12, CategoryId = 6, FoodId = 4 },
                        new { FoodCategoryId = 13, CategoryId = 7, FoodId = 4 },
                        new { FoodCategoryId = 14, CategoryId = 1, FoodId = 5 },
                        new { FoodCategoryId = 15, CategoryId = 3, FoodId = 5 },
                        new { FoodCategoryId = 16, CategoryId = 4, FoodId = 5 },
                        new { FoodCategoryId = 17, CategoryId = 5, FoodId = 5 },
                        new { FoodCategoryId = 18, CategoryId = 6, FoodId = 5 },
                        new { FoodCategoryId = 19, CategoryId = 7, FoodId = 5 },
                        new { FoodCategoryId = 20, CategoryId = 8, FoodId = 5 },
                        new { FoodCategoryId = 21, CategoryId = 1, FoodId = 6 },
                        new { FoodCategoryId = 22, CategoryId = 3, FoodId = 6 },
                        new { FoodCategoryId = 23, CategoryId = 4, FoodId = 6 },
                        new { FoodCategoryId = 24, CategoryId = 3, FoodId = 7 },
                        new { FoodCategoryId = 25, CategoryId = 5, FoodId = 7 },
                        new { FoodCategoryId = 26, CategoryId = 3, FoodId = 8 },
                        new { FoodCategoryId = 27, CategoryId = 5, FoodId = 8 },
                        new { FoodCategoryId = 28, CategoryId = 6, FoodId = 8 },
                        new { FoodCategoryId = 29, CategoryId = 6, FoodId = 9 },
                        new { FoodCategoryId = 30, CategoryId = 7, FoodId = 9 },
                        new { FoodCategoryId = 31, CategoryId = 2, FoodId = 10 },
                        new { FoodCategoryId = 32, CategoryId = 5, FoodId = 10 },
                        new { FoodCategoryId = 33, CategoryId = 6, FoodId = 10 },
                        new { FoodCategoryId = 34, CategoryId = 7, FoodId = 10 },
                        new { FoodCategoryId = 35, CategoryId = 8, FoodId = 10 },
                        new { FoodCategoryId = 36, CategoryId = 2, FoodId = 11 },
                        new { FoodCategoryId = 37, CategoryId = 8, FoodId = 11 }
                    );
                });

            modelBuilder.Entity("Sommelier.Models.UserWine", b =>
                {
                    b.Property<int>("UserWineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Favorite");

                    b.Property<int>("UserId");

                    b.Property<int>("WineId");

                    b.HasKey("UserWineId");

                    b.ToTable("UserWine");

                    b.HasData(
                        new { UserWineId = 1, Favorite = false, UserId = 1, WineId = 1 },
                        new { UserWineId = 2, Favorite = false, UserId = 2, WineId = 2 }
                    );
                });

            modelBuilder.Entity("Sommelier.Models.Variety", b =>
                {
                    b.Property<int>("VarietyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.HasKey("VarietyId");

                    b.ToTable("Variety");

                    b.HasData(
                        new { VarietyId = 1, CategoryId = 1, Name = "White Table Wine" },
                        new { VarietyId = 2, CategoryId = 1, Name = "Sauvignon Blanc" },
                        new { VarietyId = 3, CategoryId = 1, Name = "Grüner Veltliner" },
                        new { VarietyId = 4, CategoryId = 1, Name = "Pinot Grigio" },
                        new { VarietyId = 5, CategoryId = 1, Name = "Albariño" },
                        new { VarietyId = 6, CategoryId = 2, Name = "Gewürtzraminer" },
                        new { VarietyId = 7, CategoryId = 2, Name = "Müller-Thurgau" },
                        new { VarietyId = 8, CategoryId = 2, Name = " Malvasia" },
                        new { VarietyId = 9, CategoryId = 2, Name = "Moscato" },
                        new { VarietyId = 10, CategoryId = 2, Name = "Riesling" },
                        new { VarietyId = 11, CategoryId = 3, Name = "Chardonnay" },
                        new { VarietyId = 12, CategoryId = 3, Name = "Roussanne" },
                        new { VarietyId = 13, CategoryId = 3, Name = "Marsanne" },
                        new { VarietyId = 14, CategoryId = 3, Name = "Viognier" },
                        new { VarietyId = 15, CategoryId = 4, Name = "Sparkling Wine" },
                        new { VarietyId = 16, CategoryId = 4, Name = "Champagne" },
                        new { VarietyId = 17, CategoryId = 4, Name = "Prosecco" },
                        new { VarietyId = 18, CategoryId = 4, Name = "Cava" },
                        new { VarietyId = 19, CategoryId = 5, Name = "St. Laurent" },
                        new { VarietyId = 20, CategoryId = 5, Name = "Pinot Noir" },
                        new { VarietyId = 21, CategoryId = 5, Name = "Zweigelt" },
                        new { VarietyId = 22, CategoryId = 5, Name = "Gamay" },
                        new { VarietyId = 23, CategoryId = 6, Name = "Red Table Wine" },
                        new { VarietyId = 24, CategoryId = 6, Name = "Tempranillo" },
                        new { VarietyId = 25, CategoryId = 6, Name = "Sangiovese" },
                        new { VarietyId = 26, CategoryId = 6, Name = "Zinfandel" },
                        new { VarietyId = 27, CategoryId = 6, Name = "Grenache/Garnacha" },
                        new { VarietyId = 28, CategoryId = 6, Name = "Merlot" },
                        new { VarietyId = 29, CategoryId = 7, Name = "Cabernet Sauvignon" },
                        new { VarietyId = 30, CategoryId = 7, Name = "Mourvedre/Monastrell" },
                        new { VarietyId = 31, CategoryId = 7, Name = "Aglianico" },
                        new { VarietyId = 32, CategoryId = 7, Name = "Malbec" },
                        new { VarietyId = 33, CategoryId = 7, Name = "Syrah/Shiraz" },
                        new { VarietyId = 34, CategoryId = 8, Name = "Late Harvest" },
                        new { VarietyId = 35, CategoryId = 8, Name = "Ice Wine" },
                        new { VarietyId = 36, CategoryId = 8, Name = "Sherry" },
                        new { VarietyId = 37, CategoryId = 8, Name = "Port" }
                    );
                });

            modelBuilder.Entity("Sommelier.Models.Wine", b =>
                {
                    b.Property<int>("WineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Name");

                    b.Property<int>("VarietyId");

                    b.Property<int>("WineryId");

                    b.Property<int>("Year");

                    b.HasKey("WineId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Wine");

                    b.HasData(
                        new { WineId = 1, Name = "Heminway Vineyard", VarietyId = 26, WineryId = 1, Year = 2015 },
                        new { WineId = 2, Name = "Red Fox", VarietyId = 23, WineryId = 2, Year = 2016 }
                    );
                });

            modelBuilder.Entity("Sommelier.Models.Winery", b =>
                {
                    b.Property<int>("WineryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("WineryId");

                    b.ToTable("Winery");

                    b.HasData(
                        new { WineryId = 1, Name = "Turley" },
                        new { WineryId = 2, Name = "Arrington" }
                    );
                });

            modelBuilder.Entity("Sommelier.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new { Id = "b4216c5f-9375-4252-bbd9-5b0c80f005f8", AccessFailedCount = 0, ConcurrencyStamp = "f7d02897-9ee8-4fa0-9118-2582f0aca8e2", Email = "admin@admin.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "ADMIN@ADMIN.COM", NormalizedUserName = "ADMIN@ADMIN.COM", PasswordHash = "AQAAAAEAACcQAAAAEKa1uHkNj1irrpODqdeLJOZKcQ6Tt6OLSb7EzP90ZNxPODYa7y1SziZ6OYCZIYQjpQ==", PhoneNumberConfirmed = false, SecurityStamp = "157239e4-80e0-4c03-bee8-87fef6074b95", TwoFactorEnabled = false, UserName = "admin@admin.com", FirstName = "admin", LastName = "admin" },
                        new { Id = "e25e8cce-ea21-4819-bd59-390b4475e544", AccessFailedCount = 0, ConcurrencyStamp = "8853151b-3462-4ec2-bd8a-b2c5c8407d03", Email = "jonathan@edwards.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "JONATHAN@EDWARDS.COM", NormalizedUserName = "JONATHAN@EDWARDS.COM", PasswordHash = "AQAAAAEAACcQAAAAEGmTAPTCbrT/Tvn1QemU+lHOhDA97eHQcm5E7ILt4frp6JF3RFLV4fXw9CI49KWHqA==", PhoneNumberConfirmed = false, SecurityStamp = "5d8c967f-2816-4bf8-aaf4-a78e59331d55", TwoFactorEnabled = false, UserName = "jonathan@edwards.com", FirstName = "Jonathan", LastName = "Edwards" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sommelier.Models.Wine", b =>
                {
                    b.HasOne("Sommelier.Models.ApplicationUser")
                        .WithMany("Wines")
                        .HasForeignKey("ApplicationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
